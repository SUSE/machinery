{
    "docs": [
        {
            "location": "/docs/",
            "text": "Machinery Documentation\n\n\nWelcome! The Machinary documentation is a reference aimed at system administrators.\nIt will give you an overview of Machinery itself, its subcommands, and usage examples.\n\n\nWhat is Machinery?\n\n\nMachinery is a systems management toolkit for Linux. It supports configuration\ndiscovery, system validation, and service migration. Machinery is based on the\nidea of a universal system description. Machinery has a set of commands which\nwork with this system description. These commands can be combined to form work\nflows. Machinery is targeted at the system administrator of the data center.\n\n\nWork Flow Examples\n\n\nInspect a System and Show Results\n\n\n\n\nmachinery inspect --extract-files --name=NAME HOSTNAME\n\n\nmachinery show NAME\n\n\n\n\nExport System Description as HTML\n\n\n\n\nmachinery export-html --html-dir=tmp NAME\n\n\n\n\nInspect Two Systems and Compare Them\n\n\n\n\nmachinery inspect HOSTNAME1\n\n\nmachinery inspect HOSTNAME2\n\n\nmachinery compare HOSTNAME1 HOSTNAME2\n\n\n\n\nFully Inspect a System and Export a Kiwi Description\n\n\n\n\nmachinery inspect --extract-files HOSTNAME\n\n\nmachinery export-kiwi --kiwi-dir=~/kiwi HOSTNAME\n\n\n\n\nFully Inspect a System and Export an AutoYaST Profile\n\n\n\n\nmachinery inspect --extract-files HOSTNAME\n\n\nmachinery export-autoyast --autoyast-dir=~/autoyast HOSTNAME\n\n\n\n\nFully Inspect a System and Deploy a Replicate to the Cloud\n\n\n\n\nmachinery inspect --extract-files HOSTNAME\n\n\nmachinery deploy --cloud-config=~/openrc.sh HOSTNAME\n\n\n\n\nHow to upgrade a SLES 11 SP3 system to SLES 12\n\n\n\n\nMachinery can help you to upgrade without affecting the original system.\n    For more details please read the Wiki Page: \nHow to upgrade a SLES 11 SP3 system to SLES 12\n.\n\n\n\n\nFor a more detailed overview see \nGeneral Overview\n.",
            "title": "Welcome"
        },
        {
            "location": "/docs/#machinery-documentation",
            "text": "Welcome! The Machinary documentation is a reference aimed at system administrators.\nIt will give you an overview of Machinery itself, its subcommands, and usage examples.",
            "title": "Machinery Documentation"
        },
        {
            "location": "/docs/#what-is-machinery",
            "text": "Machinery is a systems management toolkit for Linux. It supports configuration\ndiscovery, system validation, and service migration. Machinery is based on the\nidea of a universal system description. Machinery has a set of commands which\nwork with this system description. These commands can be combined to form work\nflows. Machinery is targeted at the system administrator of the data center.",
            "title": "What is Machinery?"
        },
        {
            "location": "/docs/#work-flow-examples",
            "text": "",
            "title": "Work Flow Examples"
        },
        {
            "location": "/docs/#inspect-a-system-and-show-results",
            "text": "machinery inspect --extract-files --name=NAME HOSTNAME  machinery show NAME",
            "title": "Inspect a System and Show Results"
        },
        {
            "location": "/docs/#export-system-description-as-html",
            "text": "machinery export-html --html-dir=tmp NAME",
            "title": "Export System Description as HTML"
        },
        {
            "location": "/docs/#inspect-two-systems-and-compare-them",
            "text": "machinery inspect HOSTNAME1  machinery inspect HOSTNAME2  machinery compare HOSTNAME1 HOSTNAME2",
            "title": "Inspect Two Systems and Compare Them"
        },
        {
            "location": "/docs/#fully-inspect-a-system-and-export-a-kiwi-description",
            "text": "machinery inspect --extract-files HOSTNAME  machinery export-kiwi --kiwi-dir=~/kiwi HOSTNAME",
            "title": "Fully Inspect a System and Export a Kiwi Description"
        },
        {
            "location": "/docs/#fully-inspect-a-system-and-export-an-autoyast-profile",
            "text": "machinery inspect --extract-files HOSTNAME  machinery export-autoyast --autoyast-dir=~/autoyast HOSTNAME",
            "title": "Fully Inspect a System and Export an AutoYaST Profile"
        },
        {
            "location": "/docs/#fully-inspect-a-system-and-deploy-a-replicate-to-the-cloud",
            "text": "machinery inspect --extract-files HOSTNAME  machinery deploy --cloud-config=~/openrc.sh HOSTNAME",
            "title": "Fully Inspect a System and Deploy a Replicate to the Cloud"
        },
        {
            "location": "/docs/#how-to-upgrade-a-sles-11-sp3-system-to-sles-12",
            "text": "Machinery can help you to upgrade without affecting the original system.\n    For more details please read the Wiki Page:  How to upgrade a SLES 11 SP3 system to SLES 12 .   For a more detailed overview see  General Overview .",
            "title": "How to upgrade a SLES 11 SP3 system to SLES 12"
        },
        {
            "location": "/machinery_main_general.1/",
            "text": "Machinery \u2014 A Systems Management Toolkit for Linux\n\n\nSynopsis\n\n\nmachinery\n SUBCOMMAND [options] \n\n\nmachinery\n help [SUBCOMMAND]\n\n\nConceptual Overview\n\n\nMachinery's core concept is the complete representation of a system by a\nuniversal system description.\nSystem descriptions are managed independently of the described\nsystems which allows for system state conservation and offline preparation of\nmodifications.\n\n\nMachinery's subcommands work on the system description as the connecting\nelement.\nSystem descriptions are obtained by inspecting systems, importing from other\nformats, manual creation or merging existing descriptions.\nMachinery can store and modify system descriptions to allow changes to\ndescribed state of the system.\nSystem descriptions can be compared to find similarities and differences\nbetween them or analyzed to deepen the knowledge about particular aspects of\nthe system.\nSystem descriptions may be exported to other formats and can be used to\nmigrate or replicate systems.\n\n\nSubcommands can be combined in different ways to accommodate higher-level work\nflows and use cases.\nThese are some implemented and planned use cases:\n\n\nMigrate a physical system to a virtual environment:\n\n\n\n\nInspect a system to obtain a system description\n\n\nExport the system description to a Kiwi configuration\n\n\nBuild a cloud image from the configuration\n\n\nDeploy the image to the cloud\n\n\n\n\nMigrate a system while changing the configuration:\n\n\n\n\nInspect a system to obtain a system description\n\n\nModify the system description\n\n\nBuild image for deployment\n\n\n\n\nUsing Machinery as an extension from other formats:\n\n\n\n\nImport AutoYaST profile as system description\n\n\nBuild image for deployment\n\n\n\n\nMachinery provides an extensible set of tools which can be combined to create\nhigher-level work flows.\nIt is designed for environments which focus on automation, integration\nof diverse tools and accountable management.\nMachinery integrates with existing configuration management solutions to\naddress use cases currently not covered by them.\n\n\nThe machinery Command\n\n\nMachinery is implemented as a command line tool named \nmachinery\n. The\n\nmachinery\n command has several subcommands for specific tasks. All\nsubcommands work with the same system description identified by an optional\nname which can be used by all subcommands.\n\n\nSystem Description\n\n\nThe System Description format and file structure is documented in the machinery\nwiki: \nSystem Description Format\n.\n\n\nMachinery validates descriptions on load. It checks that the JSON structure of\nthe manifest file, which contains the primary and meta data of a description, is \ncorrect and it adheres to the schema. Validation errors are reported as warnings.\nIt also checks that the information about extracted files is consistent. Missing\nfiles or extra files without reference in the manifest are treated also as\nwarnings. All other issues are errors which need to be fixed so that Machinery\ncan use the description.\nTo manually validate a description use the \nmachinery validate\n command.\n\n\nScopes\n\n\nThe system description is structured into \"scopes\". A scope covers a specific\npart of the configuration of the inspected system such as installed packages,\nrepositories, or changed configuration files.\n\n\nFor example, if you are only interested in the installed packages, limit the\nscope to \npackages\n. This will output only the requested information.\n\n\nSee the \nScopes documentation\n for a list of all supported scopes.\n\n\nOptions for All Subcommands\n\n\n\n\n\n\n\n\n\n--version\n:\n    Displays version of \nmachinery\n tool. Exit when done.\n\n\n\n\n\n\n--debug\n:\n    Enable debug mode. Machinery writes additional information into the log\n    file which can be useful to track down problems.\n\n\n\n\n\n\nFiles and Devices\n\n\n\n\n\n\n~/.machinery/machinery.config\n:\n\n\nConfiguration file.\n\n\n\n\n\n\n~/.machinery/machinery.log\n:\n\n\nCentral log file, in the format date, time, process id, and log message.\n\n\n\n\n\n\nem1 (openSUSE 13.2 / openSUSE leap)\n, \neth0\n (SLE11) and \nlan0\n (SLE12):\n\n\nFirst network device is used when DHCP in built image is enabled.\n\n\n\n\n\n\nEnvironment\n\n\n\n\n\n\nMACHINERY_LOG_FILE\n:\n\n\nLocation of Machinery's log file (defaults to \n~/.machinery/machinery.log\n).\n\n\n\n\n\n\nCopyright\n\n\nCopyright (c) 2013-2016 \nSUSE LLC",
            "title": "General Overview"
        },
        {
            "location": "/machinery_main_general.1/#machinery-a-systems-management-toolkit-for-linux",
            "text": "",
            "title": "Machinery \u2014 A Systems Management Toolkit for Linux"
        },
        {
            "location": "/machinery_main_general.1/#synopsis",
            "text": "machinery  SUBCOMMAND [options]   machinery  help [SUBCOMMAND]",
            "title": "Synopsis"
        },
        {
            "location": "/machinery_main_general.1/#conceptual-overview",
            "text": "Machinery's core concept is the complete representation of a system by a\nuniversal system description.\nSystem descriptions are managed independently of the described\nsystems which allows for system state conservation and offline preparation of\nmodifications.  Machinery's subcommands work on the system description as the connecting\nelement.\nSystem descriptions are obtained by inspecting systems, importing from other\nformats, manual creation or merging existing descriptions.\nMachinery can store and modify system descriptions to allow changes to\ndescribed state of the system.\nSystem descriptions can be compared to find similarities and differences\nbetween them or analyzed to deepen the knowledge about particular aspects of\nthe system.\nSystem descriptions may be exported to other formats and can be used to\nmigrate or replicate systems.  Subcommands can be combined in different ways to accommodate higher-level work\nflows and use cases.\nThese are some implemented and planned use cases:  Migrate a physical system to a virtual environment:   Inspect a system to obtain a system description  Export the system description to a Kiwi configuration  Build a cloud image from the configuration  Deploy the image to the cloud   Migrate a system while changing the configuration:   Inspect a system to obtain a system description  Modify the system description  Build image for deployment   Using Machinery as an extension from other formats:   Import AutoYaST profile as system description  Build image for deployment   Machinery provides an extensible set of tools which can be combined to create\nhigher-level work flows.\nIt is designed for environments which focus on automation, integration\nof diverse tools and accountable management.\nMachinery integrates with existing configuration management solutions to\naddress use cases currently not covered by them.",
            "title": "Conceptual Overview"
        },
        {
            "location": "/machinery_main_general.1/#the-machinery-command",
            "text": "Machinery is implemented as a command line tool named  machinery . The machinery  command has several subcommands for specific tasks. All\nsubcommands work with the same system description identified by an optional\nname which can be used by all subcommands.",
            "title": "The machinery Command"
        },
        {
            "location": "/machinery_main_general.1/#system-description",
            "text": "The System Description format and file structure is documented in the machinery\nwiki:  System Description Format .  Machinery validates descriptions on load. It checks that the JSON structure of\nthe manifest file, which contains the primary and meta data of a description, is \ncorrect and it adheres to the schema. Validation errors are reported as warnings.\nIt also checks that the information about extracted files is consistent. Missing\nfiles or extra files without reference in the manifest are treated also as\nwarnings. All other issues are errors which need to be fixed so that Machinery\ncan use the description.\nTo manually validate a description use the  machinery validate  command.",
            "title": "System Description"
        },
        {
            "location": "/machinery_main_general.1/#scopes",
            "text": "The system description is structured into \"scopes\". A scope covers a specific\npart of the configuration of the inspected system such as installed packages,\nrepositories, or changed configuration files.  For example, if you are only interested in the installed packages, limit the\nscope to  packages . This will output only the requested information.  See the  Scopes documentation  for a list of all supported scopes.",
            "title": "Scopes"
        },
        {
            "location": "/machinery_main_general.1/#options-for-all-subcommands",
            "text": "--version :\n    Displays version of  machinery  tool. Exit when done.    --debug :\n    Enable debug mode. Machinery writes additional information into the log\n    file which can be useful to track down problems.",
            "title": "Options for All Subcommands"
        },
        {
            "location": "/machinery_main_general.1/#files-and-devices",
            "text": "~/.machinery/machinery.config :  Configuration file.    ~/.machinery/machinery.log :  Central log file, in the format date, time, process id, and log message.    em1 (openSUSE 13.2 / openSUSE leap) ,  eth0  (SLE11) and  lan0  (SLE12):  First network device is used when DHCP in built image is enabled.",
            "title": "Files and Devices"
        },
        {
            "location": "/machinery_main_general.1/#environment",
            "text": "MACHINERY_LOG_FILE :  Location of Machinery's log file (defaults to  ~/.machinery/machinery.log ).",
            "title": "Environment"
        },
        {
            "location": "/machinery_main_general.1/#copyright",
            "text": "Copyright (c) 2013-2016  SUSE LLC",
            "title": "Copyright"
        },
        {
            "location": "/machinery_main_scopes.1/",
            "text": "Scopes\n\n\n\n\nos\n\n\n\n\nContains information about the operating system, name, version, and\narchitecture of the inspected system.\n\n\n\n\npackages\n\n\n\n\nContains information on all installed packages installed on the\ninspected system.\n\n\n\n\npatterns\n\n\n\n\nContains all patterns or tasks installed on the inspected system. A pattern is a\ncollection of software packages, similar to the idea of tasks on Debian/Ubuntu-\nlike systems. The meaning of software patterns depends on the package manager of the\ndistribution.\n\n\n\n\nrepositories\n\n\n\n\nContains all information about software repositories configured on the\ninspected system. The information about repositories depends on the package\nmanager of the distribution. Machinery collects the following information\nfrom each configured repository:\n\n\n\n\n\n\nThe alias name of the repository.\n\n\n\n\n\n\nThe repository type, rpm-md and YaST types that are used on SUSE systems.\n\n\n\n\n\n\nThe path to the repository. This could be a local path, a remote location,\n  a device, or a file.\n\n\n\n\n\n\nA boolean flag that indicates if this repository is in use or not.\n\n\n\n\n\n\nA boolean flag that indicates if this repository should update the locally\n  stored metadata files with metadata files from the origin automatically or\n  not.\n\n\n\n\n\n\nA boolean flag that indicates if packages which would be installed from\n  this repository should be checked by their gpg key or not.\n\n\n\n\n\n\nA numeric value for a priority. The priority of a repository is compared\n  to the priorities of all other activated repositories. Values can\n  range from 1 (highest) to 99 (lowest, default).\n\n\n\n\n\n\nusers\n\n\n\n\n\n\nContains information about the system users including user and group ids,\nlogin information, such as password hashes and - if available - additional\npassword properties.\n\n\n\n\ngroups\n\n\n\n\nContains information about the system groups such as group attributes and the\nlist of group members.\n\n\n\n\nservices\n\n\n\n\nServices are applications running in the background doing continuous work\nor waiting for requests to do work.\nThe scope determines which services are configured to be started in which\nrunlevel. It uses the \nchkconfig\n command to obtain that information.\nThe xinetd services that are also displayed by \nchkconfig\n are switched\non/off by editing configuration files and are ignored in this context.\n\n\n\n\nchanged-config-files\n\n\n\n\nContains all configuration files which have been changed since they were\ninstalled.\nChanged configuration files are all those files which are marked as such in the\npackage which has installed them. A configuration file change is reported\nif its content or its attributes like Linux permission bits or ownership\nhave changed.\n\n\n\n\nchanged-managed-files\n\n\n\n\nContains the names and contents of all non-configuration files which have\nbeen changed compared to the files in the package. A file change is reported\nif its content or its attributes like Linux permission bits or ownership\nhave changed.\n\n\n\n\nunmanaged-files\n\n\n\n\nContains the names and contents of all files which are not part of any package.\nThe list of unmanaged files contains only plain files and\ndirectories. Special files like device nodes, named pipes and Unix domain\nsockets are ignored. The directories \n/tmp\n,  \n/var/tmp\n, \n/.snapshots/\n,\n\n/var/run\n and special mounts like procfs and sysfs are ignored, too.\nIf a directory is in this list, no file or directory below it belongs to a\npackage.\n\n\nMeta data information of unmanaged files is only available if the files were\nextracted during inspection.\n\n\nUsing the \n--extract-unmanaged-files\n option, the files are transferred from\nthe system and stored in the system description. Depending on the content of\nthe inspected system, the amount of data stored may be huge.",
            "title": "Scopes"
        },
        {
            "location": "/machinery_main_scopes.1/#scopes",
            "text": "os   Contains information about the operating system, name, version, and\narchitecture of the inspected system.   packages   Contains information on all installed packages installed on the\ninspected system.   patterns   Contains all patterns or tasks installed on the inspected system. A pattern is a\ncollection of software packages, similar to the idea of tasks on Debian/Ubuntu-\nlike systems. The meaning of software patterns depends on the package manager of the\ndistribution.   repositories   Contains all information about software repositories configured on the\ninspected system. The information about repositories depends on the package\nmanager of the distribution. Machinery collects the following information\nfrom each configured repository:    The alias name of the repository.    The repository type, rpm-md and YaST types that are used on SUSE systems.    The path to the repository. This could be a local path, a remote location,\n  a device, or a file.    A boolean flag that indicates if this repository is in use or not.    A boolean flag that indicates if this repository should update the locally\n  stored metadata files with metadata files from the origin automatically or\n  not.    A boolean flag that indicates if packages which would be installed from\n  this repository should be checked by their gpg key or not.    A numeric value for a priority. The priority of a repository is compared\n  to the priorities of all other activated repositories. Values can\n  range from 1 (highest) to 99 (lowest, default).    users    Contains information about the system users including user and group ids,\nlogin information, such as password hashes and - if available - additional\npassword properties.   groups   Contains information about the system groups such as group attributes and the\nlist of group members.   services   Services are applications running in the background doing continuous work\nor waiting for requests to do work.\nThe scope determines which services are configured to be started in which\nrunlevel. It uses the  chkconfig  command to obtain that information.\nThe xinetd services that are also displayed by  chkconfig  are switched\non/off by editing configuration files and are ignored in this context.   changed-config-files   Contains all configuration files which have been changed since they were\ninstalled.\nChanged configuration files are all those files which are marked as such in the\npackage which has installed them. A configuration file change is reported\nif its content or its attributes like Linux permission bits or ownership\nhave changed.   changed-managed-files   Contains the names and contents of all non-configuration files which have\nbeen changed compared to the files in the package. A file change is reported\nif its content or its attributes like Linux permission bits or ownership\nhave changed.   unmanaged-files   Contains the names and contents of all files which are not part of any package.\nThe list of unmanaged files contains only plain files and\ndirectories. Special files like device nodes, named pipes and Unix domain\nsockets are ignored. The directories  /tmp ,   /var/tmp ,  /.snapshots/ , /var/run  and special mounts like procfs and sysfs are ignored, too.\nIf a directory is in this list, no file or directory below it belongs to a\npackage.  Meta data information of unmanaged files is only available if the files were\nextracted during inspection.  Using the  --extract-unmanaged-files  option, the files are transferred from\nthe system and stored in the system description. Depending on the content of\nthe inspected system, the amount of data stored may be huge.",
            "title": "Scopes"
        },
        {
            "location": "/machinery_main_usecases.1/",
            "text": "Use Cases\n\n\nSome of the important use cases of Machinery are:\n\n\n\n\nInspecting a System and Collecting Information\n\n\n\n\nCollecting a variety of information. Limit the gathered\n  information with scopes (see section about scopes). Each inspection step\n  updates the system description.\n\n\n\n\nReviewing System Description\n\n\n\n\nAfter a successful inspection, the system description can be displayed on\n  the console or the output can be fed into other tools.\n\n\n\n\nCloning a System\n\n\n\n\nAn inspected system can be cloned. The inspection step returns a system\n  description which is used as the basis for cloning physical or virtual\n  instances. Machinery can build a system image from the description, which\n  can then for example be deployed to a cloud environment.",
            "title": "Use cases"
        },
        {
            "location": "/machinery_main_usecases.1/#use-cases",
            "text": "Some of the important use cases of Machinery are:   Inspecting a System and Collecting Information   Collecting a variety of information. Limit the gathered\n  information with scopes (see section about scopes). Each inspection step\n  updates the system description.   Reviewing System Description   After a successful inspection, the system description can be displayed on\n  the console or the output can be fed into other tools.   Cloning a System   An inspected system can be cloned. The inspection step returns a system\n  description which is used as the basis for cloning physical or virtual\n  instances. Machinery can build a system image from the description, which\n  can then for example be deployed to a cloud environment.",
            "title": "Use Cases"
        },
        {
            "location": "/machinery_main_security_implications.1/",
            "text": "Security Implications\n\n\nThis document describes security related issues administrators need to be aware of when using\nMachinery.\n\n\nInspection\n\n\nMachinery inspects several parts of a system which are covered by Machinery's scopes.\nInformation about scopes is listed \nhere\n.\n\n\nUsers of Machinery who inspect systems need to be aware of the security implications\nto take the right decisions on how to protect the retrieved data.\n\n\nRetrieval of Data\n\n\nMachinery transfers data from one end point to another via SSH (Secure Shell, using public key authentication).\n\n\nDepending on the scope, Machinery \ncollects information\n\nabout files on the system. Additionally, when the \n--extract-files\n option is given for the\n\ninspect\n command, not only the meta data about the files (e.g. permission bits, owner, group etc\n.) but also the file content is extracted. Machinery does not distinguish between sensitive\ndata (such as private keys or password files). That means that everyone with access to the system\ndescription has automatically access to \nall\n extracted files and contained sensitive data.\n\n\nroot/sudo Privileges\n\n\nAn inspection can only be done, when the user on the inspected system is either root or has\nsudo privileges. Information about the required sudo configuration can be found\n\nhere\n.\n\n\nStorage of Data\n\n\nAccess Restrictions\n\n\nAfter an inspection has been completed, the directory where the description is stored is made\nreadable only for the user. The data is not encrypted by Machinery.\n\n\nUsed Permission Bits\n\n\nWhen Machinery extracts data, it sets permission bits for files and directories as follows:\n\n\n\n\n\n\n\n\nPermission Bits\n\n\nUsed for ...\n\n\n\n\n\n\n\n\n\n\n0700\n\n\n... directories inside the description directory\n\n\n\n\n\n\n0600\n\n\n... for files inside the description directory\n\n\n\n\n\n\n\n\nAccessing System Descriptions\n\n\nBy default, all system descriptions are stored in the directory \n.machinery\n in the home directory\nof the user running Machinery. The directory can be redefined by the environment variable\n\n$MACHINERY_DIR\n. Each description has its own subdirectory. There is a \nmanifest.json\n file in\neach description directory which contains the data of the inspection. Extracted files are stored in\nseparate subdirectories inside the same description directory.\n\n\nPresentation of Data\n\n\nThere are several ways how data can be presented to one or more users. The user has the option to\neither start a web server and view descriptions or view the descriptions only in the console.\n\n\nThe following commands are used to present data to users:\n\n\n\n\nshow\n\n\ncompare\n\n\nserve\n\n\nlist\n\n\n\n\nAll of the commands listed above also have a \n--html\n option. When this option is used, Machinery\nstarts a web server what will listen on the IP address \n127.0.0.1\n. The \nserve\n command\noffers also a \n--public\n option which makes the server listen on all configured IP addresses.\n\n\nWARNING:\n When making the server reachable from the outside, users can modify the link to\naccess also other descriptions. There is currently no way to restrict the access to only one\ndescription.\n\n\nThe \nserve\n command also allows the user to specify a port via the \n--port\n option. When no port\nis specified, the default port which is configured in the machinery config file in\n\n~/.machinery/machinery.config\n) will be taken.\n\n\nExport of Data\n\n\nexport-autoyast\n\n\nThe \nexport-autoyast\n command creates an AutoYaST profile for an automated installation. This will result\nin tar balls containing the extracted files from the system description. These files\npotentially contain sensitive data (e.g. passwords). This fact needs to be kept in mind, especially\nif these files are copied to a web server for an AutoYaST installation via HTTP.\n\n\nexport-kiwi\n\n\nThe program \nkiwi\n allows you to build OS images for deployment. Machinery gives\nyou the opportunity to export a KIWI description. This description can be used to build an image via Kiwi.\nThe \nexport-kiwi\n command creates a directory, where it stores the Kiwi configuration and the files\nof a system description. These files potentially contain sensitive data (e.g. passwords).\n\n\nbuild\n\n\nThe created image potentially contains sensitive data (e.g. passwords) from extracted files.\n\n\ndeploy\n\n\nThe uploaded image potentially contains sensitive data (e.g. passwords) from extracted files.",
            "title": "Security Implications"
        },
        {
            "location": "/machinery_main_security_implications.1/#security-implications",
            "text": "This document describes security related issues administrators need to be aware of when using\nMachinery.",
            "title": "Security Implications"
        },
        {
            "location": "/machinery_main_security_implications.1/#inspection",
            "text": "Machinery inspects several parts of a system which are covered by Machinery's scopes.\nInformation about scopes is listed  here .  Users of Machinery who inspect systems need to be aware of the security implications\nto take the right decisions on how to protect the retrieved data.",
            "title": "Inspection"
        },
        {
            "location": "/machinery_main_security_implications.1/#retrieval-of-data",
            "text": "Machinery transfers data from one end point to another via SSH (Secure Shell, using public key authentication).  Depending on the scope, Machinery  collects information \nabout files on the system. Additionally, when the  --extract-files  option is given for the inspect  command, not only the meta data about the files (e.g. permission bits, owner, group etc\n.) but also the file content is extracted. Machinery does not distinguish between sensitive\ndata (such as private keys or password files). That means that everyone with access to the system\ndescription has automatically access to  all  extracted files and contained sensitive data.",
            "title": "Retrieval of Data"
        },
        {
            "location": "/machinery_main_security_implications.1/#rootsudo-privileges",
            "text": "An inspection can only be done, when the user on the inspected system is either root or has\nsudo privileges. Information about the required sudo configuration can be found here .",
            "title": "root/sudo Privileges"
        },
        {
            "location": "/machinery_main_security_implications.1/#storage-of-data",
            "text": "",
            "title": "Storage of Data"
        },
        {
            "location": "/machinery_main_security_implications.1/#access-restrictions",
            "text": "After an inspection has been completed, the directory where the description is stored is made\nreadable only for the user. The data is not encrypted by Machinery.",
            "title": "Access Restrictions"
        },
        {
            "location": "/machinery_main_security_implications.1/#used-permission-bits",
            "text": "When Machinery extracts data, it sets permission bits for files and directories as follows:     Permission Bits  Used for ...      0700  ... directories inside the description directory    0600  ... for files inside the description directory",
            "title": "Used Permission Bits"
        },
        {
            "location": "/machinery_main_security_implications.1/#accessing-system-descriptions",
            "text": "By default, all system descriptions are stored in the directory  .machinery  in the home directory\nof the user running Machinery. The directory can be redefined by the environment variable $MACHINERY_DIR . Each description has its own subdirectory. There is a  manifest.json  file in\neach description directory which contains the data of the inspection. Extracted files are stored in\nseparate subdirectories inside the same description directory.",
            "title": "Accessing System Descriptions"
        },
        {
            "location": "/machinery_main_security_implications.1/#presentation-of-data",
            "text": "There are several ways how data can be presented to one or more users. The user has the option to\neither start a web server and view descriptions or view the descriptions only in the console.  The following commands are used to present data to users:   show  compare  serve  list   All of the commands listed above also have a  --html  option. When this option is used, Machinery\nstarts a web server what will listen on the IP address  127.0.0.1 . The  serve  command\noffers also a  --public  option which makes the server listen on all configured IP addresses.  WARNING:  When making the server reachable from the outside, users can modify the link to\naccess also other descriptions. There is currently no way to restrict the access to only one\ndescription.  The  serve  command also allows the user to specify a port via the  --port  option. When no port\nis specified, the default port which is configured in the machinery config file in ~/.machinery/machinery.config ) will be taken.",
            "title": "Presentation of Data"
        },
        {
            "location": "/machinery_main_security_implications.1/#export-of-data",
            "text": "",
            "title": "Export of Data"
        },
        {
            "location": "/machinery_main_security_implications.1/#export-autoyast",
            "text": "The  export-autoyast  command creates an AutoYaST profile for an automated installation. This will result\nin tar balls containing the extracted files from the system description. These files\npotentially contain sensitive data (e.g. passwords). This fact needs to be kept in mind, especially\nif these files are copied to a web server for an AutoYaST installation via HTTP.",
            "title": "export-autoyast"
        },
        {
            "location": "/machinery_main_security_implications.1/#export-kiwi",
            "text": "The program  kiwi  allows you to build OS images for deployment. Machinery gives\nyou the opportunity to export a KIWI description. This description can be used to build an image via Kiwi.\nThe  export-kiwi  command creates a directory, where it stores the Kiwi configuration and the files\nof a system description. These files potentially contain sensitive data (e.g. passwords).",
            "title": "export-kiwi"
        },
        {
            "location": "/machinery_main_security_implications.1/#build",
            "text": "The created image potentially contains sensitive data (e.g. passwords) from extracted files.",
            "title": "build"
        },
        {
            "location": "/machinery_main_security_implications.1/#deploy",
            "text": "The uploaded image potentially contains sensitive data (e.g. passwords) from extracted files.",
            "title": "deploy"
        },
        {
            "location": "/machinery-analyze.1/",
            "text": "analyze \u2014 Analyze System Description\n\n\nSynopsis\n\n\nmachinery analyze\n NAME -o | --operation=OPERATION\n\n\nmachinery\n help analyze\n\n\nDescription\n\n\nThe \nanalyze\n subcommand analyzes an existing system description and enriches\nit with additional information. Supported operations are:\n\n\n\n\nchanged-config-files-diffs\n:\n    Generates the diffs between the extracted changed configuration files from the\n    system and the original versions from the packages.\n    The diffs can be shown using \nmachinery show --show-diffs\n\n\n\n\nArguments\n\n\n\n\nNAME\n (required):\n    Name of the system description.\n\n\n\n\nOptions\n\n\n\n\n-o OPERATION\n, \n--operation=OPERATION\n (required):\n    The analyze operation to perform.\n\n\n\n\nExamples\n\n\n\n\n\n\nAnalyze the config file diffs for the \nmyhost\n system description:\n\n\n$ \nmachinery\n analyze myhost --operation=changed-config-files-diffs",
            "title": "Analyze"
        },
        {
            "location": "/machinery-analyze.1/#analyze-analyze-system-description",
            "text": "",
            "title": "analyze \u2014 Analyze System Description"
        },
        {
            "location": "/machinery-analyze.1/#synopsis",
            "text": "machinery analyze  NAME -o | --operation=OPERATION  machinery  help analyze",
            "title": "Synopsis"
        },
        {
            "location": "/machinery-analyze.1/#description",
            "text": "The  analyze  subcommand analyzes an existing system description and enriches\nit with additional information. Supported operations are:   changed-config-files-diffs :\n    Generates the diffs between the extracted changed configuration files from the\n    system and the original versions from the packages.\n    The diffs can be shown using  machinery show --show-diffs",
            "title": "Description"
        },
        {
            "location": "/machinery-analyze.1/#arguments",
            "text": "NAME  (required):\n    Name of the system description.",
            "title": "Arguments"
        },
        {
            "location": "/machinery-analyze.1/#options",
            "text": "-o OPERATION ,  --operation=OPERATION  (required):\n    The analyze operation to perform.",
            "title": "Options"
        },
        {
            "location": "/machinery-analyze.1/#examples",
            "text": "Analyze the config file diffs for the  myhost  system description:  $  machinery  analyze myhost --operation=changed-config-files-diffs",
            "title": "Examples"
        },
        {
            "location": "/machinery-build.1/",
            "text": "build \u2014 Build Image from System Description\n\n\nSynopsis\n\n\nmachinery build\n NAME -i IMAGE-DIR | --image-dir=IMAGE-DIR\n\n\nmachinery\n help build\n\n\nDescription\n\n\nThe \nbuild\n command builds an image from a system description. The image is a\nsystem image in the qcow2 format, which can be used with the KVM hypervisor.\nIt can be run locally or deployed to a cloud environment.\n\n\nmachinery\n uses the image building command line tool\n\nKIWI\n to perform the actual build. KIWI\ndata is stored to a temporary directory and cleaned up after the build. The KIWI\nlog is shown as output of the \nbuild\n command format for showing progress and\ndiagnosing errors.\n\n\nWhen building an image, Machinery filters out some files which would break the\nbuilt image. The list of filters is shown at the beginning of the build.\n\n\nArguments\n\n\n\n\nNAME\n (required):\n    Use specified system description.\n\n\n\n\nOptions\n\n\n\n\n\n\n-i IMAGE-DIR\n, \n--image-dir=IMAGE-DIR\n (required):\n    Save image file under specified path.\n\n\n\n\n\n\n-d\n, \n--enable-dhcp\n (optional):\n    Enable DHCP client on first network card of built image\n\n\n\n\n\n\n-s\n, \n--enable-ssh\n (optional):\n    Enable SSH service in built image\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\n\nThe \nbuild\n command requires the packages \nkiwi\n and \nkiwi-desc-vmxboot\n.\n\n\n\n\n\n\nThe necessary vmxboot template for the machinery being built must be\n    installed (i.e. if you want to build an openSUSE Leap machine then the\n    template \n/usr/share/kiwi/image/vmxboot/suse-leap42.1\n is required)\n\n\n\n\n\n\nAll repositories in the system description must be accessible from the\n    build machine on which \nmachinery build\n is called.\n\n\n\n\n\n\nMachinery can only build x86_64 images on x86_64 systems at the moment.\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nTo build an image from the system description named \"tux\" and to save the\n   image under the \n/tmp/tux/\n directory:\n\n\n$ \nmachinery\n build tux -i /tmp/tux/",
            "title": "Build"
        },
        {
            "location": "/machinery-build.1/#build-build-image-from-system-description",
            "text": "",
            "title": "build \u2014 Build Image from System Description"
        },
        {
            "location": "/machinery-build.1/#synopsis",
            "text": "machinery build  NAME -i IMAGE-DIR | --image-dir=IMAGE-DIR  machinery  help build",
            "title": "Synopsis"
        },
        {
            "location": "/machinery-build.1/#description",
            "text": "The  build  command builds an image from a system description. The image is a\nsystem image in the qcow2 format, which can be used with the KVM hypervisor.\nIt can be run locally or deployed to a cloud environment.  machinery  uses the image building command line tool KIWI  to perform the actual build. KIWI\ndata is stored to a temporary directory and cleaned up after the build. The KIWI\nlog is shown as output of the  build  command format for showing progress and\ndiagnosing errors.  When building an image, Machinery filters out some files which would break the\nbuilt image. The list of filters is shown at the beginning of the build.",
            "title": "Description"
        },
        {
            "location": "/machinery-build.1/#arguments",
            "text": "NAME  (required):\n    Use specified system description.",
            "title": "Arguments"
        },
        {
            "location": "/machinery-build.1/#options",
            "text": "-i IMAGE-DIR ,  --image-dir=IMAGE-DIR  (required):\n    Save image file under specified path.    -d ,  --enable-dhcp  (optional):\n    Enable DHCP client on first network card of built image    -s ,  --enable-ssh  (optional):\n    Enable SSH service in built image",
            "title": "Options"
        },
        {
            "location": "/machinery-build.1/#prerequisites",
            "text": "The  build  command requires the packages  kiwi  and  kiwi-desc-vmxboot .    The necessary vmxboot template for the machinery being built must be\n    installed (i.e. if you want to build an openSUSE Leap machine then the\n    template  /usr/share/kiwi/image/vmxboot/suse-leap42.1  is required)    All repositories in the system description must be accessible from the\n    build machine on which  machinery build  is called.    Machinery can only build x86_64 images on x86_64 systems at the moment.",
            "title": "Prerequisites"
        },
        {
            "location": "/machinery-build.1/#examples",
            "text": "To build an image from the system description named \"tux\" and to save the\n   image under the  /tmp/tux/  directory:  $  machinery  build tux -i /tmp/tux/",
            "title": "Examples"
        },
        {
            "location": "/machinery-compare.1/",
            "text": "compare \u2014 Compare System Descriptions\n\n\nSynopsis\n\n\nmachinery compare\n [-s SCOPE | --scope=SCOPE] [-e IGNORE-SCOPE | --ignore-scope=IGNORE-SCOPE] [--no-pager] [--show-all] [--html] NAME1 NAME2\n\n\nmachinery\n help compare\n\n\nDescription\n\n\nThe \ncompare\n command compares stored system descriptions. The scope option can\nbe used to limit the output to the given scopes.\n\n\nArguments\n\n\n\n\n\n\nNAME1\n (required):\n    First system description to compare.\n\n\n\n\n\n\nNAME2\n (required):\n    Second system description to compare.\n\n\n\n\n\n\nOptions\n\n\n\n\n\n\n-s SCOPE\n, \n--scope=SCOPE\n (optional):\n    Limit output to the specified scope.\n    See the \nScope section\n for more information.\n\n\n\n\n\n\n-e SCOPE\n, \n--ignore-scope=IGNORE-SCOPE\n (optional):\n    Skip output of the specified scope.\n    See the \nScope section\n for more information.\n\n\n\n\n\n\n--no-pager\n (optional):\n    Do not pipe output into a pager.\n\n\n\n\n\n\n--show-all\n (optional):\n    Show also common properties of the descriptions (not only the differences).\n\n\n\n\n\n\n--html\n (optional):\n    Shows the comparison of two system descriptions in the web browser.\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nCompare system descriptions saved as \nearth\n and \nmoon\n:\n\n\n$ \nmachinery\n compare earth moon\n\n\n\n\n\n\nCompare system descriptions, but limit the scope to repositories only:\n\n\n$ \nmachinery\n compare earth moon -s repositories\n\n\n\n\n\n\nCompare lists of changed managed files and include the common ones in the\n    list:\n\n\n$ \nmachinery\n compare earth moon --scope=changed-managed-files --show-all\n\n\n\n\n\n\nCompares system descriptions and shows the result in HTML format in your web browser:\n\n\n$ \nmachinery\n compare --html earth moon",
            "title": "Compare"
        },
        {
            "location": "/machinery-compare.1/#compare-compare-system-descriptions",
            "text": "",
            "title": "compare \u2014 Compare System Descriptions"
        },
        {
            "location": "/machinery-compare.1/#synopsis",
            "text": "machinery compare  [-s SCOPE | --scope=SCOPE] [-e IGNORE-SCOPE | --ignore-scope=IGNORE-SCOPE] [--no-pager] [--show-all] [--html] NAME1 NAME2  machinery  help compare",
            "title": "Synopsis"
        },
        {
            "location": "/machinery-compare.1/#description",
            "text": "The  compare  command compares stored system descriptions. The scope option can\nbe used to limit the output to the given scopes.",
            "title": "Description"
        },
        {
            "location": "/machinery-compare.1/#arguments",
            "text": "NAME1  (required):\n    First system description to compare.    NAME2  (required):\n    Second system description to compare.",
            "title": "Arguments"
        },
        {
            "location": "/machinery-compare.1/#options",
            "text": "-s SCOPE ,  --scope=SCOPE  (optional):\n    Limit output to the specified scope.\n    See the  Scope section  for more information.    -e SCOPE ,  --ignore-scope=IGNORE-SCOPE  (optional):\n    Skip output of the specified scope.\n    See the  Scope section  for more information.    --no-pager  (optional):\n    Do not pipe output into a pager.    --show-all  (optional):\n    Show also common properties of the descriptions (not only the differences).    --html  (optional):\n    Shows the comparison of two system descriptions in the web browser.",
            "title": "Options"
        },
        {
            "location": "/machinery-compare.1/#examples",
            "text": "Compare system descriptions saved as  earth  and  moon :  $  machinery  compare earth moon    Compare system descriptions, but limit the scope to repositories only:  $  machinery  compare earth moon -s repositories    Compare lists of changed managed files and include the common ones in the\n    list:  $  machinery  compare earth moon --scope=changed-managed-files --show-all    Compares system descriptions and shows the result in HTML format in your web browser:  $  machinery  compare --html earth moon",
            "title": "Examples"
        },
        {
            "location": "/machinery-config.1/",
            "text": "config \u2014 Configure Machinery\n\n\nSynopsis\n\n\nmachinery config\n\n\nmachinery config\n KEY\n\n\nmachinery config\n KEY=VALUE\n\n\nmachinery\n help config\n\n\nDescription\n\n\nThe \nconfig\n command shows or changes machinery's configuration.\n\n\nIf no arguments are passed the \nconfig\n command lists all configuration\nentries and their values. If only the key is provided its value is shown.\nIf key and value are specified this configuration entry is set accordingly.\n\n\nThe configuration is stored in \n~/.machinery/machinery.config\n.\n\n\nArguments\n\n\n\n\n\n\nKEY\n:\n    Name of the configuration entry.\n\n\n\n\n\n\nVALUE\n:\n    Value of the configuration entry.\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nTurn off hints:\n\n\n$ \nmachinery\n config hints=off\n\n\n\n\n\n\nShow current configuration of hints:\n\n\n$ \nmachinery\n config hints\n\n\n\n\n\n\nList all configuration entries and their values:\n\n\n$ \nmachinery\n config",
            "title": "Config"
        },
        {
            "location": "/machinery-config.1/#config-configure-machinery",
            "text": "",
            "title": "config \u2014 Configure Machinery"
        },
        {
            "location": "/machinery-config.1/#synopsis",
            "text": "machinery config  machinery config  KEY  machinery config  KEY=VALUE  machinery  help config",
            "title": "Synopsis"
        },
        {
            "location": "/machinery-config.1/#description",
            "text": "The  config  command shows or changes machinery's configuration.  If no arguments are passed the  config  command lists all configuration\nentries and their values. If only the key is provided its value is shown.\nIf key and value are specified this configuration entry is set accordingly.  The configuration is stored in  ~/.machinery/machinery.config .",
            "title": "Description"
        },
        {
            "location": "/machinery-config.1/#arguments",
            "text": "KEY :\n    Name of the configuration entry.    VALUE :\n    Value of the configuration entry.",
            "title": "Arguments"
        },
        {
            "location": "/machinery-config.1/#examples",
            "text": "Turn off hints:  $  machinery  config hints=off    Show current configuration of hints:  $  machinery  config hints    List all configuration entries and their values:  $  machinery  config",
            "title": "Examples"
        },
        {
            "location": "/machinery-copy.1/",
            "text": "copy \u2014 Copy System Description\n\n\nSynopsis\n\n\nmachinery copy\n FROM_NAME TO_NAME\n\n\nmachinery\n help copy\n\n\nDescription\n\n\nThe \ncopy\n command copies a stored system description. It creates a new\ndescription named TO_NAME containing the same content as the description\nFROM_NAME.\n\n\nArguments\n\n\n\n\n\n\nFROM_NAME\n (required):\n    Name of the source system description.\n\n\n\n\n\n\nTO_NAME\n (required):\n    Name of the target system description.\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nCreate a copy of the system description \nearth\n under the name \nmoon\n:\n\n\n$ \nmachinery\n copy earth moon",
            "title": "Copy"
        },
        {
            "location": "/machinery-copy.1/#copy-copy-system-description",
            "text": "",
            "title": "copy \u2014 Copy System Description"
        },
        {
            "location": "/machinery-copy.1/#synopsis",
            "text": "machinery copy  FROM_NAME TO_NAME  machinery  help copy",
            "title": "Synopsis"
        },
        {
            "location": "/machinery-copy.1/#description",
            "text": "The  copy  command copies a stored system description. It creates a new\ndescription named TO_NAME containing the same content as the description\nFROM_NAME.",
            "title": "Description"
        },
        {
            "location": "/machinery-copy.1/#arguments",
            "text": "FROM_NAME  (required):\n    Name of the source system description.    TO_NAME  (required):\n    Name of the target system description.",
            "title": "Arguments"
        },
        {
            "location": "/machinery-copy.1/#examples",
            "text": "Create a copy of the system description  earth  under the name  moon :  $  machinery  copy earth moon",
            "title": "Examples"
        },
        {
            "location": "/machinery-deploy.1/",
            "text": "deploy \u2014 Deploy Image to OpenStack Cloud\n\n\nSynopsis\n\n\nmachinery deploy\n NAME -c CONFIG_FILE | --cloud-config=CONFIG_FILE\n   [-i IMAGE_DIR | --image-dir=IMAGE_DIR]\n   [-n CLOUD_IMAGE_NAME | --cloud-image-name=CLOUD_IMAGE_NAME]\n   [-s | --insecure ]\n\n\nmachinery\n help [deploy]\n\n\nDescription\n\n\nThe \ndeploy\n command builds and deploys an image to an OpenStack cloud.\nThis command is particularly useful for testing, debugging, or validation.\n\n\n\n\nNOTE: Set Password for Unattended Work\n\n\nMachinery asks for a password when sourcing the configuration\nfile. This interrupts the work flow and the user has to enter\nthis password.\nIf you prefer to leave it uninterrupted and unattented, remove\nthe following line in your cloud configuration file (see the \n-c\n option):\n\n\nread -s OS_PASSWORD_INPUT\n\n\nand set the password in the \nOS_PASSWORD\n variable:\n\n\nexport OS_PASSWORD=YOUR_PASSWORD\n\n\n\n\nArguments\n\n\n\n\nNAME\n (required):\n    Name of the system description.\n\n\n\n\nOptions\n\n\n\n\n\n\n-c CONFIG_FILE\n, \n--cloud-config=CONFIG_FILE\n (required):\n    Path to file where the cloud config (openrc.sh) is located.\n    The configuration file is sourced by Machinery.\n\n\n\n\n\n\n-i IMAGE_DIR\n, \n--image-dir=IMAGE_DIR\n (optional):\n    Image file under specific path.\n\n\n\n\n\n\n-n CLOUD_IMAGE_NAME\n, \n--cloud-image-name=CLOUD_IMAGE_NAME\n (required):\n    Name of the image in the cloud.\n\n\n\n\n\n\n-s\n, \n--insecure\n (optional):\n    Allow to make \"insecure\" HTTPS requests, without checking the SSL\n    certificate when uploading to the cloud.\n\n\n\n\n\n\nPrerequisites\n\n\n\n\nThe \ndeploy\n command requires the packages \nkiwi\n for building the image\n   and \npython-glanceclient\n for uploading the image to the cloud.\n\n\n\n\nSupported Architectures\n\n\nMachinery only supports deploying x86_64 images on x86_64 systems.\n\n\nExamples\n\n\n\n\n\n\nBuild an image under the system description named \njeos\n.\n   Deploy it to the OpenStack cloud name \ntux-cloud\n by using the\n   configuration file \nopenrc.sh\n in directory \ntux\n:\n\n\n$ \nmachinery\n deploy jeos -n tux-cloud -c tux/openrc.sh",
            "title": "Deploy"
        },
        {
            "location": "/machinery-deploy.1/#deploy-deploy-image-to-openstack-cloud",
            "text": "",
            "title": "deploy \u2014 Deploy Image to OpenStack Cloud"
        },
        {
            "location": "/machinery-deploy.1/#synopsis",
            "text": "machinery deploy  NAME -c CONFIG_FILE | --cloud-config=CONFIG_FILE\n   [-i IMAGE_DIR | --image-dir=IMAGE_DIR]\n   [-n CLOUD_IMAGE_NAME | --cloud-image-name=CLOUD_IMAGE_NAME]\n   [-s | --insecure ]  machinery  help [deploy]",
            "title": "Synopsis"
        },
        {
            "location": "/machinery-deploy.1/#description",
            "text": "The  deploy  command builds and deploys an image to an OpenStack cloud.\nThis command is particularly useful for testing, debugging, or validation.",
            "title": "Description"
        },
        {
            "location": "/machinery-deploy.1/#note-set-password-for-unattended-work",
            "text": "Machinery asks for a password when sourcing the configuration\nfile. This interrupts the work flow and the user has to enter\nthis password.\nIf you prefer to leave it uninterrupted and unattented, remove\nthe following line in your cloud configuration file (see the  -c  option):  read -s OS_PASSWORD_INPUT  and set the password in the  OS_PASSWORD  variable:  export OS_PASSWORD=YOUR_PASSWORD",
            "title": "NOTE: Set Password for Unattended Work"
        },
        {
            "location": "/machinery-deploy.1/#arguments",
            "text": "NAME  (required):\n    Name of the system description.",
            "title": "Arguments"
        },
        {
            "location": "/machinery-deploy.1/#options",
            "text": "-c CONFIG_FILE ,  --cloud-config=CONFIG_FILE  (required):\n    Path to file where the cloud config (openrc.sh) is located.\n    The configuration file is sourced by Machinery.    -i IMAGE_DIR ,  --image-dir=IMAGE_DIR  (optional):\n    Image file under specific path.    -n CLOUD_IMAGE_NAME ,  --cloud-image-name=CLOUD_IMAGE_NAME  (required):\n    Name of the image in the cloud.    -s ,  --insecure  (optional):\n    Allow to make \"insecure\" HTTPS requests, without checking the SSL\n    certificate when uploading to the cloud.",
            "title": "Options"
        },
        {
            "location": "/machinery-deploy.1/#prerequisites",
            "text": "The  deploy  command requires the packages  kiwi  for building the image\n   and  python-glanceclient  for uploading the image to the cloud.",
            "title": "Prerequisites"
        },
        {
            "location": "/machinery-deploy.1/#supported-architectures",
            "text": "Machinery only supports deploying x86_64 images on x86_64 systems.",
            "title": "Supported Architectures"
        },
        {
            "location": "/machinery-deploy.1/#examples",
            "text": "Build an image under the system description named  jeos .\n   Deploy it to the OpenStack cloud name  tux-cloud  by using the\n   configuration file  openrc.sh  in directory  tux :  $  machinery  deploy jeos -n tux-cloud -c tux/openrc.sh",
            "title": "Examples"
        },
        {
            "location": "/machinery-export-autoyast.1/",
            "text": "export-autoyast \u2014 Export System Description as AutoYasST profile\n\n\nSynopsis\n\n\nmachinery export-autoyast\n -a | --autoyast-dir=DIRECTORY NAME\n   --force\n\n\nmachinery\n help export-autoyast\n\n\nDescription\n\n\nThe \nexport-autoyast\n subcommand exports a stored system description as an AutoYaST\nprofile.\n\n\nArguments\n\n\n\n\nNAME\n (required):\n    Name of the system description.\n\n\n\n\nOptions\n\n\n\n\n\n\n-a AUTOYAST_DIR\n, \n--autoyast-dir=AUTOYAST_DIR\n (required):\n    Write the AutoYaST profile to a subdirectory at the specified directory. The directory\n    will be created if it does not exist yet.\n\n\n\n\n\n\n--force\n (optional):\n    Overwrite an existing output directory.\n\n\n\n\n\n\nSystem Registration\n\n\n\n\nTo register a SLES 12 system automatically with AutoYaST, it is required to\n    edit the generated profile. The following example registers the system with\n    the SUSE Customer Center.\n\n\n\n\nsuse_register\n\n  \ndo_registration config:type=\nboolean\ntrue\n/do_registration\n\n  \nemail\ntux@example.com\n/email\n\n  \nreg_code\nMY_SECRET_REGCODE\n/reg_code\n\n  \ninstall_updates config:type=\nboolean\ntrue\n/install_updates\n\n  \nslp_discovery config:type=\nboolean\nfalse\n/slp_discovery\n\n\n/suse_register\n\n\n\n\n\n\n\nMore information can be found at the \nSUSE AutoYaST documentation\n.\n\n\n\n\nExamples\n\n\n\n\n\n\nExport the \nmyhost\n system description to \n/tmp/myhost-autoyast\n:\n\n\n$ \nmachinery\n export-autoyast myhost --autoyast-dir=/tmp",
            "title": "Export AutoYaST"
        },
        {
            "location": "/machinery-export-autoyast.1/#export-autoyast-export-system-description-as-autoyasst-profile",
            "text": "",
            "title": "export-autoyast \u2014 Export System Description as AutoYasST profile"
        },
        {
            "location": "/machinery-export-autoyast.1/#synopsis",
            "text": "machinery export-autoyast  -a | --autoyast-dir=DIRECTORY NAME\n   --force  machinery  help export-autoyast",
            "title": "Synopsis"
        },
        {
            "location": "/machinery-export-autoyast.1/#description",
            "text": "The  export-autoyast  subcommand exports a stored system description as an AutoYaST\nprofile.",
            "title": "Description"
        },
        {
            "location": "/machinery-export-autoyast.1/#arguments",
            "text": "NAME  (required):\n    Name of the system description.",
            "title": "Arguments"
        },
        {
            "location": "/machinery-export-autoyast.1/#options",
            "text": "-a AUTOYAST_DIR ,  --autoyast-dir=AUTOYAST_DIR  (required):\n    Write the AutoYaST profile to a subdirectory at the specified directory. The directory\n    will be created if it does not exist yet.    --force  (optional):\n    Overwrite an existing output directory.",
            "title": "Options"
        },
        {
            "location": "/machinery-export-autoyast.1/#system-registration",
            "text": "To register a SLES 12 system automatically with AutoYaST, it is required to\n    edit the generated profile. The following example registers the system with\n    the SUSE Customer Center.   suse_register \n   do_registration config:type= boolean true /do_registration \n   email tux@example.com /email \n   reg_code MY_SECRET_REGCODE /reg_code \n   install_updates config:type= boolean true /install_updates \n   slp_discovery config:type= boolean false /slp_discovery  /suse_register    More information can be found at the  SUSE AutoYaST documentation .",
            "title": "System Registration"
        },
        {
            "location": "/machinery-export-autoyast.1/#examples",
            "text": "Export the  myhost  system description to  /tmp/myhost-autoyast :  $  machinery  export-autoyast myhost --autoyast-dir=/tmp",
            "title": "Examples"
        },
        {
            "location": "/machinery-export-kiwi.1/",
            "text": "export-kiwi \u2014 Export System Description as KIWI Image Description\n\n\nSynopsis\n\n\nmachinery export-kiwi\n -k | --kiwi-dir=DIRECTORY NAME\n   --force\n\n\nmachinery\n help export-kiwi\n\n\nDescription\n\n\nThe \nexport-kiwi\n subcommand exports a stored system description as a KIWI\nimage description.\n\n\nArguments\n\n\n\n\nNAME\n (required):\n    Name of the system description.\n\n\n\n\nOptions\n\n\n\n\n\n\n-k KIWI_DIR\n, \n--kiwi-dir=KIWI_DIR\n (required):\n    Write the KIWI image description to a subdirectory at the specified directory. The directory\n    will be created if it does not exist yet.\n\n\n\n\n\n\n--force\n (optional):\n    Overwrite an existing output directory.\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nExport the \nmyhost\n system description to \n/tmp/myhost-kiwi\n:\n\n\n$ \nmachinery\n export-kiwi myhost --kiwi-dir=/tmp",
            "title": "Export Kiwi"
        },
        {
            "location": "/machinery-export-kiwi.1/#export-kiwi-export-system-description-as-kiwi-image-description",
            "text": "",
            "title": "export-kiwi \u2014 Export System Description as KIWI Image Description"
        },
        {
            "location": "/machinery-export-kiwi.1/#synopsis",
            "text": "machinery export-kiwi  -k | --kiwi-dir=DIRECTORY NAME\n   --force  machinery  help export-kiwi",
            "title": "Synopsis"
        },
        {
            "location": "/machinery-export-kiwi.1/#description",
            "text": "The  export-kiwi  subcommand exports a stored system description as a KIWI\nimage description.",
            "title": "Description"
        },
        {
            "location": "/machinery-export-kiwi.1/#arguments",
            "text": "NAME  (required):\n    Name of the system description.",
            "title": "Arguments"
        },
        {
            "location": "/machinery-export-kiwi.1/#options",
            "text": "-k KIWI_DIR ,  --kiwi-dir=KIWI_DIR  (required):\n    Write the KIWI image description to a subdirectory at the specified directory. The directory\n    will be created if it does not exist yet.    --force  (optional):\n    Overwrite an existing output directory.",
            "title": "Options"
        },
        {
            "location": "/machinery-export-kiwi.1/#examples",
            "text": "Export the  myhost  system description to  /tmp/myhost-kiwi :  $  machinery  export-kiwi myhost --kiwi-dir=/tmp",
            "title": "Examples"
        },
        {
            "location": "/machinery-export-html.1/",
            "text": "export-html \u2014 Export System Description as HTML\n\n\nSynopsis\n\n\nmachinery export-html\n -d | --html-dir=DIRECTORY NAME\n   --force\n\n\nmachinery\n help export-html\n\n\nDescription\n\n\nThe \nexport-html\n subcommand exports a stored system description as HTML.\n\n\nArguments\n\n\n\n\nNAME\n (required):\n    Name of the system description.\n\n\n\n\nOptions\n\n\n\n\n\n\n-d DIRECTORY\n, \n--html-dir=DIRECTORY\n (required):\n    Write the HTML page and assets to this directory. The directory will\n    be created if it does not exist yet.\n\n\n\n\n\n\n--force\n (optional):\n    Delete the directory if it exists and recreate it.\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nExport the \nmyhost\n system description to \n/tmp/myhost-html\n:\n\n\n$ \nmachinery\n export-html --html-dir=/tmp myhost",
            "title": "Export HTML"
        },
        {
            "location": "/machinery-export-html.1/#export-html-export-system-description-as-html",
            "text": "",
            "title": "export-html \u2014 Export System Description as HTML"
        },
        {
            "location": "/machinery-export-html.1/#synopsis",
            "text": "machinery export-html  -d | --html-dir=DIRECTORY NAME\n   --force  machinery  help export-html",
            "title": "Synopsis"
        },
        {
            "location": "/machinery-export-html.1/#description",
            "text": "The  export-html  subcommand exports a stored system description as HTML.",
            "title": "Description"
        },
        {
            "location": "/machinery-export-html.1/#arguments",
            "text": "NAME  (required):\n    Name of the system description.",
            "title": "Arguments"
        },
        {
            "location": "/machinery-export-html.1/#options",
            "text": "-d DIRECTORY ,  --html-dir=DIRECTORY  (required):\n    Write the HTML page and assets to this directory. The directory will\n    be created if it does not exist yet.    --force  (optional):\n    Delete the directory if it exists and recreate it.",
            "title": "Options"
        },
        {
            "location": "/machinery-export-html.1/#examples",
            "text": "Export the  myhost  system description to  /tmp/myhost-html :  $  machinery  export-html --html-dir=/tmp myhost",
            "title": "Examples"
        },
        {
            "location": "/machinery-inspect.1/",
            "text": "inspect \u2014 Inspect Running System\n\n\nSynopsis\n\n\nmachinery inspect\n [OPTIONS] HOSTNAME\n\n\nmachinery\n help inspect\n\n\nDescription\n\n\nThe \ninspect\n command inspects a running system and generates a system\ndescription from the gathered data.\n\n\nThe system data is structured into scopes, controlled by the\n\n--scope\n option.\n\n\nNote\n:\nMachinery will always inspect all specified scopes, and skip scopes which\ntrigger errors.\n\n\nNote\n:\nTasks on Debian-like systems are treated as patterns.\n\n\nArguments\n\n\n\n\nHOSTNAME\n (required):\n    The host name of the system to be inspected. The host name will also be\n    used as the name of the stored system description unless another name is\n    provided with the \n--name\n option.\n\n\n\n\nOptions\n\n\n\n\n\n\n-n NAME\n, \n--name=NAME\n (optional):\n    Store the system description under the specified name.\n\n\n\n\n\n\n-s SCOPE\n, \n--scope=SCOPE\n (optional):\n    Inspect system for specified scope.\n    See the \nScope section\n for more information.\n\n\n\n\n\n\n-e SCOPE\n, \n--ignore-scope=IGNORE-SCOPE\n (optional):\n    Inspect system for all scopes except the specified scope.\n    See the \nScope section\n for more information.\n\n\n\n\n\n\n-r USER\n, \n--remote-user=USER\n (optional):\n    Defines the user which is used to access the inspected system via SSH.\n    This user needs to be allowed to run certain commands using sudo (see\n    Prerequisites for more information).\n    To change the default-user use \nmachinery config remote-user=USER\n\n\n\n\n\n\n-p SSH-PORT\n, \n--ssh-port SSH-PORT\n (optional):\n    Specifies the SSH port of the remote SSH server.\n\n\n\n\n\n\n-i SSH-IDENTITY-FILE\n, \n--ssh-identity-file SSH-IDENTITY-FILE\n (optional):\n    Specifies the SSH private key what should be used to authenticate with the\n    remote SSH server. Keys with a passphrase are not allowed here. Use the ssh-agent\n    instead.\n\n\n\n\n\n\n-x\n, \n--extract-files\n (optional):\n    Extract changed configuration and unmanaged files from the inspected system.\n    Shortcut for the combination of \n--extract-changed-config-files\n,\n    \n--extract-unmanaged-files\n, and \n--extract-changed-managed-files\n\n\n\n\n\n\n--extract-changed-config-files\n (optional):\n    Extract changed configuration files from the inspected system.\n\n\n\n\n\n\n--extract-unmanaged-files\n (optional):\n    Extract unmanaged files from the inspected system.\n\n\n\n\n\n\n--extract-changed-managed-files\n (optional):\n    Extract changed managed files from inspected system.\n\n\n\n\n\n\n--skip-files\n (optional):\n    Do not consider given files or directories during inspection. Either provide\n    one file or directory name or a list of names separated by commas. You can\n    also point to a file which contains a list of files to filter (one per line)\n    by adding an '@' before the path, e.g.\n\n\n$ \nmachinery\n inspect --skip-files=@/path/to/filter_file myhost\n\n\nIf a filename contains a comma it needs to be escaped, e.g.\n\n\n$ \nmachinery\n inspect --skip-files=/file\\,with_comma myhost\n\n\nNote\n: File or directory names are not expanded, e.g. '../path' is taken\n  literally and not expanded.\n\n\n\n\n\n\n--verbose\n (optional):\n    Display the filters which are used during inspection.\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\n\nInspecting a local system requires running \nmachinery\n as root.\n\n\n\n\n\n\nInspecting a remote system requires passwordless SSH login as root on the\n    inspected system.\n    Use \nssh-agent\n or asymmetric keys (you can transfer the current SSH key\n    via \nssh-copy-id\n to the inspected host, e.g.: \nssh-copy-id root@HOSTNAME\n).\n\n\n\n\n\n\nThe system to be inspected needs to have the following commands:\n\n\n\n\nrpm\n or \ndpkg\n\n\nzypper\n, \nyum\n, or \napt-cache\n\n\nrsync\n\n\nchkconfig\n, \ninitctl\n, or \nsystemctl\n\n\ncat\n\n\nsed\n\n\nfind\n\n\ntar\n\n\n\n\n\n\n\n\nWhen inspecting as non-root the user needs passwordless sudo rights.\n    The following entry in the sudoers file would allow the user \nmachinery\n\n    to run sudo without password input:\n\n\nmachinery ALL=(ALL) NOPASSWD: ALL\n\n\n\n\n\n\nTo add a remote \nmachinery\n user run as root:\n\n\n# \nuseradd\n -m machinery -c \"remote user for machinery\"\n\n\nTo configure a password for the new user run:\n\n\n# \npasswd\n machinery\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nInspect remote system \nmyhost\n and save system description under name\n    'MySystem':\n\n\n$ \nmachinery\n inspect --name=MySystem myhost\n\n\n\n\n\n\nInspect the installed packages of your local system and save system description\n    under the name 'localhost' (you need to become root):\n\n\n# \nmachinery\n inspect --scope=\"packages\" localhost\n\n\n\n\n\n\nExtracts changed managed files and saves them in the same way as changed\n    configuration files are saved:\n\n\n$ \nmachinery\n inspect --scope=changed-managed-files --extract-files myhost\n\n\n\n\n\n\nTo inspect the remote system \nmyhost\n with the user \nmachinery\n:\n\n\n$ \nmachinery\n inspect --remote-user machinery myhost",
            "title": "Inspect"
        },
        {
            "location": "/machinery-inspect.1/#inspect-inspect-running-system",
            "text": "",
            "title": "inspect \u2014 Inspect Running System"
        },
        {
            "location": "/machinery-inspect.1/#synopsis",
            "text": "machinery inspect  [OPTIONS] HOSTNAME  machinery  help inspect",
            "title": "Synopsis"
        },
        {
            "location": "/machinery-inspect.1/#description",
            "text": "The  inspect  command inspects a running system and generates a system\ndescription from the gathered data.  The system data is structured into scopes, controlled by the --scope  option.  Note :\nMachinery will always inspect all specified scopes, and skip scopes which\ntrigger errors.  Note :\nTasks on Debian-like systems are treated as patterns.",
            "title": "Description"
        },
        {
            "location": "/machinery-inspect.1/#arguments",
            "text": "HOSTNAME  (required):\n    The host name of the system to be inspected. The host name will also be\n    used as the name of the stored system description unless another name is\n    provided with the  --name  option.",
            "title": "Arguments"
        },
        {
            "location": "/machinery-inspect.1/#options",
            "text": "-n NAME ,  --name=NAME  (optional):\n    Store the system description under the specified name.    -s SCOPE ,  --scope=SCOPE  (optional):\n    Inspect system for specified scope.\n    See the  Scope section  for more information.    -e SCOPE ,  --ignore-scope=IGNORE-SCOPE  (optional):\n    Inspect system for all scopes except the specified scope.\n    See the  Scope section  for more information.    -r USER ,  --remote-user=USER  (optional):\n    Defines the user which is used to access the inspected system via SSH.\n    This user needs to be allowed to run certain commands using sudo (see\n    Prerequisites for more information).\n    To change the default-user use  machinery config remote-user=USER    -p SSH-PORT ,  --ssh-port SSH-PORT  (optional):\n    Specifies the SSH port of the remote SSH server.    -i SSH-IDENTITY-FILE ,  --ssh-identity-file SSH-IDENTITY-FILE  (optional):\n    Specifies the SSH private key what should be used to authenticate with the\n    remote SSH server. Keys with a passphrase are not allowed here. Use the ssh-agent\n    instead.    -x ,  --extract-files  (optional):\n    Extract changed configuration and unmanaged files from the inspected system.\n    Shortcut for the combination of  --extract-changed-config-files ,\n     --extract-unmanaged-files , and  --extract-changed-managed-files    --extract-changed-config-files  (optional):\n    Extract changed configuration files from the inspected system.    --extract-unmanaged-files  (optional):\n    Extract unmanaged files from the inspected system.    --extract-changed-managed-files  (optional):\n    Extract changed managed files from inspected system.    --skip-files  (optional):\n    Do not consider given files or directories during inspection. Either provide\n    one file or directory name or a list of names separated by commas. You can\n    also point to a file which contains a list of files to filter (one per line)\n    by adding an '@' before the path, e.g.  $  machinery  inspect --skip-files=@/path/to/filter_file myhost  If a filename contains a comma it needs to be escaped, e.g.  $  machinery  inspect --skip-files=/file\\,with_comma myhost  Note : File or directory names are not expanded, e.g. '../path' is taken\n  literally and not expanded.    --verbose  (optional):\n    Display the filters which are used during inspection.",
            "title": "Options"
        },
        {
            "location": "/machinery-inspect.1/#prerequisites",
            "text": "Inspecting a local system requires running  machinery  as root.    Inspecting a remote system requires passwordless SSH login as root on the\n    inspected system.\n    Use  ssh-agent  or asymmetric keys (you can transfer the current SSH key\n    via  ssh-copy-id  to the inspected host, e.g.:  ssh-copy-id root@HOSTNAME ).    The system to be inspected needs to have the following commands:   rpm  or  dpkg  zypper ,  yum , or  apt-cache  rsync  chkconfig ,  initctl , or  systemctl  cat  sed  find  tar     When inspecting as non-root the user needs passwordless sudo rights.\n    The following entry in the sudoers file would allow the user  machinery \n    to run sudo without password input:  machinery ALL=(ALL) NOPASSWD: ALL    To add a remote  machinery  user run as root:  #  useradd  -m machinery -c \"remote user for machinery\"  To configure a password for the new user run:  #  passwd  machinery",
            "title": "Prerequisites"
        },
        {
            "location": "/machinery-inspect.1/#examples",
            "text": "Inspect remote system  myhost  and save system description under name\n    'MySystem':  $  machinery  inspect --name=MySystem myhost    Inspect the installed packages of your local system and save system description\n    under the name 'localhost' (you need to become root):  #  machinery  inspect --scope=\"packages\" localhost    Extracts changed managed files and saves them in the same way as changed\n    configuration files are saved:  $  machinery  inspect --scope=changed-managed-files --extract-files myhost    To inspect the remote system  myhost  with the user  machinery :  $  machinery  inspect --remote-user machinery myhost",
            "title": "Examples"
        },
        {
            "location": "/machinery-inspect-container.1/",
            "text": "inspect-container \u2014 Inspect Container\n\n\nSynopsis\n\n\nmachinery inspect-container\n [OPTIONS] IMAGENAME\n\n\nmachinery inspect-container\n [OPTIONS] IMAGEID\n\n\nmachinery\n help inspect-container\n\n\nDescription\n\n\nThe \ninspect-container\n command inspects a container image. It creates and starts the container from the provided image before inspection\nand generates a system description from the gathered data. After the inspection the container will be killed and removed again.\nThis approach ensures that no containers and images are affected by the inspection.\n\n\nRight now the container inspection only supports Docker images.\n\n\nThe system data is structured into scopes, controlled by the\n\n--scope\n option.\n\n\nNote\n:\nMachinery will always inspect all specified scopes, and skip scopes which\ntrigger errors.\n\n\nArguments\n\n\n\n\nIMAGENAME / IMAGEID\n (required):\n    The name or ID of the image to be inspected. The provided name or ID will also be\n    used as the name of the stored system description unless another name is\n    provided with the \n--name\n option.\n\n\n\n\nOptions\n\n\n\n\n\n\n-n NAME\n, \n--name=NAME\n (optional):\n    Store the system description under the specified name.\n\n\n\n\n\n\n-s SCOPE\n, \n--scope=SCOPE\n (optional):\n    Inspect image for specified scope.\n    See the \nScope section\n for more information.\n\n\n\n\n\n\n-e SCOPE\n, \n--ignore-scope=IGNORE-SCOPE\n (optional):\n    Inspect image for all scopes except the specified scope.\n    See the \nScope section\n for more information.\n\n\n\n\n\n\n-x\n, \n--extract-files\n (optional):\n    Extract changed configuration and unmanaged files from the inspected container.\n    Shortcut for the combination of \n--extract-changed-config-files\n,\n    \n--extract-unmanaged-files\n, and \n--extract-changed-managed-files\n\n\n\n\n\n\n--extract-changed-config-files\n (optional):\n    Extract changed configuration files from the inspected image.\n\n\n\n\n\n\n--extract-unmanaged-files\n (optional):\n    Extract unmanaged files from the inspected image.\n\n\n\n\n\n\n--extract-changed-managed-files\n (optional):\n    Extract changed managed files from inspected image.\n\n\n\n\n\n\n--skip-files\n (optional):\n    Do not consider given files or directories during inspection. Either provide\n    one file or directory name or a list of names separated by commas. You can\n    also point to a file which contains a list of files to filter (one per line)\n    by adding an '@' before the path, e.g.\n\n\n$ \nmachinery\n inspect-container --skip-files=@/path/to/filter_file myimage\n\n\nIf a filename contains a comma it needs to be escaped, e.g.\n\n\n$ \nmachinery\n inspect-container --skip-files=/file\\,with_comma myimage\n\n\nNote\n: File or directory names are not expanded, e.g. '../path' is taken\n  literally and not expanded.\n\n\n\n\n\n\n--verbose\n (optional):\n    Display the filters which are used during inspection.\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n\n\nInspecting a container requires an image specified by the name or ID.\n\n\n\n\n\n\nThe image to be inspected needs to have the following commands:\n\n\n\n\nrpm\n or \ndpkg\n\n\nzypper\n, \nyum\n or \napt-cache\n\n\nrsync\n\n\ncat\n\n\nsed\n\n\nfind\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nInspect Docker container \nmyimage\n and save system description under name 'MyContainer':\n\n\n$ \nmachinery\n inspect-container --name=MyContainer myimage\n\n\n\n\n\n\nInspect Docker container \n076f46c1bef1\n and save system description under name 'MySecondContainer':\n\n\n$ \nmachinery\n inspect-container --name=MySecondContainer 076f46c1bef1\n\n\n\n\n\n\nExtract changed managed files and save them:\n\n\n$ \nmachinery\n inspect-container --scope=changed-managed-files --extract-files myimage",
            "title": "Inspect Container"
        },
        {
            "location": "/machinery-inspect-container.1/#inspect-container-inspect-container",
            "text": "",
            "title": "inspect-container \u2014 Inspect Container"
        },
        {
            "location": "/machinery-inspect-container.1/#synopsis",
            "text": "machinery inspect-container  [OPTIONS] IMAGENAME  machinery inspect-container  [OPTIONS] IMAGEID  machinery  help inspect-container",
            "title": "Synopsis"
        },
        {
            "location": "/machinery-inspect-container.1/#description",
            "text": "The  inspect-container  command inspects a container image. It creates and starts the container from the provided image before inspection\nand generates a system description from the gathered data. After the inspection the container will be killed and removed again.\nThis approach ensures that no containers and images are affected by the inspection.  Right now the container inspection only supports Docker images.  The system data is structured into scopes, controlled by the --scope  option.  Note :\nMachinery will always inspect all specified scopes, and skip scopes which\ntrigger errors.",
            "title": "Description"
        },
        {
            "location": "/machinery-inspect-container.1/#arguments",
            "text": "IMAGENAME / IMAGEID  (required):\n    The name or ID of the image to be inspected. The provided name or ID will also be\n    used as the name of the stored system description unless another name is\n    provided with the  --name  option.",
            "title": "Arguments"
        },
        {
            "location": "/machinery-inspect-container.1/#options",
            "text": "-n NAME ,  --name=NAME  (optional):\n    Store the system description under the specified name.    -s SCOPE ,  --scope=SCOPE  (optional):\n    Inspect image for specified scope.\n    See the  Scope section  for more information.    -e SCOPE ,  --ignore-scope=IGNORE-SCOPE  (optional):\n    Inspect image for all scopes except the specified scope.\n    See the  Scope section  for more information.    -x ,  --extract-files  (optional):\n    Extract changed configuration and unmanaged files from the inspected container.\n    Shortcut for the combination of  --extract-changed-config-files ,\n     --extract-unmanaged-files , and  --extract-changed-managed-files    --extract-changed-config-files  (optional):\n    Extract changed configuration files from the inspected image.    --extract-unmanaged-files  (optional):\n    Extract unmanaged files from the inspected image.    --extract-changed-managed-files  (optional):\n    Extract changed managed files from inspected image.    --skip-files  (optional):\n    Do not consider given files or directories during inspection. Either provide\n    one file or directory name or a list of names separated by commas. You can\n    also point to a file which contains a list of files to filter (one per line)\n    by adding an '@' before the path, e.g.  $  machinery  inspect-container --skip-files=@/path/to/filter_file myimage  If a filename contains a comma it needs to be escaped, e.g.  $  machinery  inspect-container --skip-files=/file\\,with_comma myimage  Note : File or directory names are not expanded, e.g. '../path' is taken\n  literally and not expanded.    --verbose  (optional):\n    Display the filters which are used during inspection.",
            "title": "Options"
        },
        {
            "location": "/machinery-inspect-container.1/#prerequisites",
            "text": "Inspecting a container requires an image specified by the name or ID.    The image to be inspected needs to have the following commands:   rpm  or  dpkg  zypper ,  yum  or  apt-cache  rsync  cat  sed  find",
            "title": "Prerequisites"
        },
        {
            "location": "/machinery-inspect-container.1/#examples",
            "text": "Inspect Docker container  myimage  and save system description under name 'MyContainer':  $  machinery  inspect-container --name=MyContainer myimage    Inspect Docker container  076f46c1bef1  and save system description under name 'MySecondContainer':  $  machinery  inspect-container --name=MySecondContainer 076f46c1bef1    Extract changed managed files and save them:  $  machinery  inspect-container --scope=changed-managed-files --extract-files myimage",
            "title": "Examples"
        },
        {
            "location": "/machinery-list.1/",
            "text": "list \u2014 List System Descriptions\n\n\nSynopsis\n\n\nmachinery list\n [OPTIONS] [NAME[,NAME2[,NAME3]]]\n\n\nmachinery\n help list\n\n\nDescription\n\n\nList the specified system descriptions if parameter name is given.\nList all available system descriptions in the internal database if no name parameter is given.\nThe list is sorted alphabetically and contains a name and the\nscopes for each system.\n\n\nOptions\n\n\n\n\n--verbose\n (optional):\n    Print additional information about the origin of scopes.\n    Currently displays [HOSTNAME] and (DATE).\n\n\n--short\n (optional):\n    List only descripton names.\n\n\n--html\n (optional):\n    Run a web server and open the list of system descriptions in HTML format in\n    your web browser using the \nxdg-open\n command.\n\n\n\n\nExamples\n\n\n\n\n\n\nLists the two specified system descriptions \na\n and \nb\n:\n\n\n$ \nmachinery\n list a b\n\n\n\n\n\n\nLists all available system descriptions:\n\n\n$ \nmachinery\n list\n\n\n\n\n\n\nSame as previous command, but additionally prints the date of each scope:\n\n\n$ \nmachinery\n list --verbose\n\n\n\n\n\n\nLists all available system description names without any additional details:\n\n\n$ \nmachinery\n list --short\n\n\n\n\n\n\nOpens HTML view of list of all available system descriptions in web browser:\n\n\n$ \nmachinery\n list --html",
            "title": "List"
        },
        {
            "location": "/machinery-list.1/#list-list-system-descriptions",
            "text": "",
            "title": "list \u2014 List System Descriptions"
        },
        {
            "location": "/machinery-list.1/#synopsis",
            "text": "machinery list  [OPTIONS] [NAME[,NAME2[,NAME3]]]  machinery  help list",
            "title": "Synopsis"
        },
        {
            "location": "/machinery-list.1/#description",
            "text": "List the specified system descriptions if parameter name is given.\nList all available system descriptions in the internal database if no name parameter is given.\nThe list is sorted alphabetically and contains a name and the\nscopes for each system.",
            "title": "Description"
        },
        {
            "location": "/machinery-list.1/#options",
            "text": "--verbose  (optional):\n    Print additional information about the origin of scopes.\n    Currently displays [HOSTNAME] and (DATE).  --short  (optional):\n    List only descripton names.  --html  (optional):\n    Run a web server and open the list of system descriptions in HTML format in\n    your web browser using the  xdg-open  command.",
            "title": "Options"
        },
        {
            "location": "/machinery-list.1/#examples",
            "text": "Lists the two specified system descriptions  a  and  b :  $  machinery  list a b    Lists all available system descriptions:  $  machinery  list    Same as previous command, but additionally prints the date of each scope:  $  machinery  list --verbose    Lists all available system description names without any additional details:  $  machinery  list --short    Opens HTML view of list of all available system descriptions in web browser:  $  machinery  list --html",
            "title": "Examples"
        },
        {
            "location": "/machinery-man.1/",
            "text": "man \u2014 Shows Man Page\n\n\nSynopsis\n\n\nmachinery man\n [OPTIONS]\n\n\nOptions\n\n\n\n\n--html\n (optional):\n    Run a web server and open the documentation in HTML format in your web browser.\n\n\n\n\nDescription\n\n\nThe \nman\n command shows the Machinery man page.",
            "title": "Man"
        },
        {
            "location": "/machinery-man.1/#man-shows-man-page",
            "text": "",
            "title": "man \u2014 Shows Man Page"
        },
        {
            "location": "/machinery-man.1/#synopsis",
            "text": "machinery man  [OPTIONS]",
            "title": "Synopsis"
        },
        {
            "location": "/machinery-man.1/#options",
            "text": "--html  (optional):\n    Run a web server and open the documentation in HTML format in your web browser.",
            "title": "Options"
        },
        {
            "location": "/machinery-man.1/#description",
            "text": "The  man  command shows the Machinery man page.",
            "title": "Description"
        },
        {
            "location": "/machinery-move.1/",
            "text": "move \u2014 Move System Description\n\n\nSynopsis\n\n\nmachinery move\n\n    FROM_NAME TO_NAME\n\n\nmachinery\n help move\n\n\nDescription\n\n\nThe \nmove\n command renames a stored system description from \nFROM_NAME\n to \nTO_NAME\n.\n\n\nArguments\n\n\n\n\n\n\nFROM_NAME\n (required):\n    Current name of the system description.\n\n\n\n\n\n\nTO_NAME\n (required):\n    New name of the system description.\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nRename the system description \nearth\n to \nmoon\n:\n\n\n$ \nmachinery\n move earth moon",
            "title": "Move"
        },
        {
            "location": "/machinery-move.1/#move-move-system-description",
            "text": "",
            "title": "move \u2014 Move System Description"
        },
        {
            "location": "/machinery-move.1/#synopsis",
            "text": "machinery move \n    FROM_NAME TO_NAME  machinery  help move",
            "title": "Synopsis"
        },
        {
            "location": "/machinery-move.1/#description",
            "text": "The  move  command renames a stored system description from  FROM_NAME  to  TO_NAME .",
            "title": "Description"
        },
        {
            "location": "/machinery-move.1/#arguments",
            "text": "FROM_NAME  (required):\n    Current name of the system description.    TO_NAME  (required):\n    New name of the system description.",
            "title": "Arguments"
        },
        {
            "location": "/machinery-move.1/#examples",
            "text": "Rename the system description  earth  to  moon :  $  machinery  move earth moon",
            "title": "Examples"
        },
        {
            "location": "/machinery-remove.1/",
            "text": "remove \u2014 Remove System Descriptions\n\n\nSynopsis\n\n\nmachinery remove\n [--all]\n    [NAME[,NAME2[,NAME3]]]\n\n\nmachinery\n help remove\n\n\nDescription\n\n\nThe \nremove\n command removes all specified system descriptions.\n\n\nOptions\n\n\n\n\n\n\n--all\n (optional):\n    Remove all stored system descriptions.\n\n\n\n\n\n\n--verbose\n (optional):\n    Explain what is being done.\n\n\n\n\n\n\nArguments\n\n\n\n\nNAME...\n (required):\n    Remove specified system descriptions.\n\n\n\n\nExamples\n\n\n\n\n\n\nRemove the system description stored as \nearth\n:\n\n\n$ \nmachinery\n remove earth\n\n\n\n\n\n\nRemove the system descriptions stored as \nearth\n and \nmoon\n:\n\n\n$ \nmachinery\n remove earth moon\n\n\n\n\n\n\nRemove all stored system descriptions:\n\n\n$ \nmachinery\n remove --all",
            "title": "Remove"
        },
        {
            "location": "/machinery-remove.1/#remove-remove-system-descriptions",
            "text": "",
            "title": "remove \u2014 Remove System Descriptions"
        },
        {
            "location": "/machinery-remove.1/#synopsis",
            "text": "machinery remove  [--all]\n    [NAME[,NAME2[,NAME3]]]  machinery  help remove",
            "title": "Synopsis"
        },
        {
            "location": "/machinery-remove.1/#description",
            "text": "The  remove  command removes all specified system descriptions.",
            "title": "Description"
        },
        {
            "location": "/machinery-remove.1/#options",
            "text": "--all  (optional):\n    Remove all stored system descriptions.    --verbose  (optional):\n    Explain what is being done.",
            "title": "Options"
        },
        {
            "location": "/machinery-remove.1/#arguments",
            "text": "NAME...  (required):\n    Remove specified system descriptions.",
            "title": "Arguments"
        },
        {
            "location": "/machinery-remove.1/#examples",
            "text": "Remove the system description stored as  earth :  $  machinery  remove earth    Remove the system descriptions stored as  earth  and  moon :  $  machinery  remove earth moon    Remove all stored system descriptions:  $  machinery  remove --all",
            "title": "Examples"
        },
        {
            "location": "/machinery-serve.1/",
            "text": "serve \u2014 Serve System Descriptions Using a Web Server\n\n\nSynopsis\n\n\nmachinery serve\n [-p PORT | --port=PORT] [--public]\n\n\nmachinery\n help serve\n\n\nDescription\n\n\nThe \nserve\n command spawns a web server to view system descriptions as an HTML\nview.\n\n\nBy default the server is available from http://127.0.0.1:7585 but both the\nIP address and the port can be configured using the according options.\n\n\nSpecific descriptions are available from http://127.0.0.1:7585/NAME, where NAME\nis the name of the system description. If no name is specified in the URL an\noverview of all descriptions is served.\n\n\nOptions\n\n\n\n\n\n\n-p PORT\n, \n--port=PORT\n (optional):\n    Specify the port on which the web server will serve the HTML view: Default: 7585\n\n\nPorts can be selected in a range between 2-65535. Ports between 2 and 1023 can only be\nchosen when \nmachinery\n will be executed as \nroot\n user.\n\n\n\n\n\n\n--public\n (optional):\n    Specifying this option, lets the server listen on each configured IP address. By default\n    the server will only listen on the localhost IP address 127.0.0.1\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nStart the server with default options:\n\n\n$ \nmachinery\n serve\n\n\n\n\n\n\nMake the server available to other machines on the network on port 3000:\n\n\n$ \nmachinery\n serve --public --port 3000",
            "title": "Serve"
        },
        {
            "location": "/machinery-serve.1/#serve-serve-system-descriptions-using-a-web-server",
            "text": "",
            "title": "serve \u2014 Serve System Descriptions Using a Web Server"
        },
        {
            "location": "/machinery-serve.1/#synopsis",
            "text": "machinery serve  [-p PORT | --port=PORT] [--public]  machinery  help serve",
            "title": "Synopsis"
        },
        {
            "location": "/machinery-serve.1/#description",
            "text": "The  serve  command spawns a web server to view system descriptions as an HTML\nview.  By default the server is available from http://127.0.0.1:7585 but both the\nIP address and the port can be configured using the according options.  Specific descriptions are available from http://127.0.0.1:7585/NAME, where NAME\nis the name of the system description. If no name is specified in the URL an\noverview of all descriptions is served.",
            "title": "Description"
        },
        {
            "location": "/machinery-serve.1/#options",
            "text": "-p PORT ,  --port=PORT  (optional):\n    Specify the port on which the web server will serve the HTML view: Default: 7585  Ports can be selected in a range between 2-65535. Ports between 2 and 1023 can only be\nchosen when  machinery  will be executed as  root  user.    --public  (optional):\n    Specifying this option, lets the server listen on each configured IP address. By default\n    the server will only listen on the localhost IP address 127.0.0.1",
            "title": "Options"
        },
        {
            "location": "/machinery-serve.1/#examples",
            "text": "Start the server with default options:  $  machinery  serve    Make the server available to other machines on the network on port 3000:  $  machinery  serve --public --port 3000",
            "title": "Examples"
        },
        {
            "location": "/machinery-show.1/",
            "text": "show \u2014 Show System Description\n\n\nSynopsis\n\n\nmachinery show\n [-s SCOPE | --scope=SCOPE] [-e IGNORE-SCOPE | --ignore-scope=IGNORE-SCOPE] [--no-pager] [--show-diffs] [--html] NAME\n\n\nmachinery\n help show\n\n\nDescription\n\n\nThe \nshow\n command displays a stored system description.\nScopes are supported and limit the output to the given scope.\nThe hostname of the inspected system and the last modification\nin local time are shown in the title of each scope section.\n\n\nArguments\n\n\n\n\nNAME\n (required):\n    Use specified system description.\n\n\n\n\nOptions\n\n\n\n\n\n\n-s SCOPE\n, \n--scope=SCOPE\n (optional):\n    Limit output to the specified scope.\n    See the \nScope section\n for more information.\n    If displaying information related to a scope fails, \nshow\n will print an error message what has failed.\n    In case of an error, no content is displayed.\n\n\n\n\n\n\n-e IGNORE-SCOPE\n, \n--ignore-scope=IGNORE-SCOPE\n (optional):\n    Skip output of the specified scope.\n    See the \nScope section\n for more information.\n\n\n\n\n\n\n--no-pager\n (optional):\n    Do not pipe output into a pager.\n\n\n\n\n\n\n--show-diffs\n (optional):\n    Include the generated diffs in the output if available (see \nmachinery help analyze\n\n    for more information).\n\n\n\n\n\n\n--html\n (optional):\n    Run a web server and open the system description in HTML format in your web browser using the\n    \nxdg-open\n command.\n\n\n\n\n\n\n--verbose\n (optional):\n    Display the filters which were applied before showing the system description.\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nShow the system description taken from the last inspection, saved as \nearth\n:\n\n\n$ \nmachinery\n show earth\n\n\n\n\n\n\nShow the system description, but limit the scope to repositories only:\n\n\n$ \nmachinery\n show earth -s repositories\n\n\n\n\n\n\nShow the list of changed managed files:\n\n\n$ \nmachinery\n show earth --scope=changed-managed-files",
            "title": "Show"
        },
        {
            "location": "/machinery-show.1/#show-show-system-description",
            "text": "",
            "title": "show \u2014 Show System Description"
        },
        {
            "location": "/machinery-show.1/#synopsis",
            "text": "machinery show  [-s SCOPE | --scope=SCOPE] [-e IGNORE-SCOPE | --ignore-scope=IGNORE-SCOPE] [--no-pager] [--show-diffs] [--html] NAME  machinery  help show",
            "title": "Synopsis"
        },
        {
            "location": "/machinery-show.1/#description",
            "text": "The  show  command displays a stored system description.\nScopes are supported and limit the output to the given scope.\nThe hostname of the inspected system and the last modification\nin local time are shown in the title of each scope section.",
            "title": "Description"
        },
        {
            "location": "/machinery-show.1/#arguments",
            "text": "NAME  (required):\n    Use specified system description.",
            "title": "Arguments"
        },
        {
            "location": "/machinery-show.1/#options",
            "text": "-s SCOPE ,  --scope=SCOPE  (optional):\n    Limit output to the specified scope.\n    See the  Scope section  for more information.\n    If displaying information related to a scope fails,  show  will print an error message what has failed.\n    In case of an error, no content is displayed.    -e IGNORE-SCOPE ,  --ignore-scope=IGNORE-SCOPE  (optional):\n    Skip output of the specified scope.\n    See the  Scope section  for more information.    --no-pager  (optional):\n    Do not pipe output into a pager.    --show-diffs  (optional):\n    Include the generated diffs in the output if available (see  machinery help analyze \n    for more information).    --html  (optional):\n    Run a web server and open the system description in HTML format in your web browser using the\n     xdg-open  command.    --verbose  (optional):\n    Display the filters which were applied before showing the system description.",
            "title": "Options"
        },
        {
            "location": "/machinery-show.1/#examples",
            "text": "Show the system description taken from the last inspection, saved as  earth :  $  machinery  show earth    Show the system description, but limit the scope to repositories only:  $  machinery  show earth -s repositories    Show the list of changed managed files:  $  machinery  show earth --scope=changed-managed-files",
            "title": "Examples"
        },
        {
            "location": "/machinery-upgrade-format.1/",
            "text": "upgrade-format \u2014 Upgrade System Description\n\n\nSynopsis\n\n\nmachinery upgrade-format\n --all\n\n\nmachinery upgrade-format\n NAME\n\n\nmachinery\n help upgrade-format\n\n\nDescription\n\n\nThe \nupgrade-format\n command upgrades a system description to the latest format\nversion.\n\n\nThe \nformat\n in this context is the structure of the internal system description\ndata. If the format version of a system description does not match the current\n\nmachinery\n format version, \nmachinery\n is no longer able to work with the data\nuntil it is upgraded. The current format version can be retrieved using\n\nmachinery --version\n. The format version of a system description can be found\nin the \nmeta\n section of the according \nmanifest.json\n file.\n\n\nIf the \n--all\n switch is given all local descriptions will be upgraded.\n\n\nOptions\n\n\n\n\n--all\n (optional):\n    Upgrade all stored system descriptions.\n\n\n\n\nArguments\n\n\n\n\nNAME\n (optional):\n    Upgrade specified system description.\n\n\n\n\nExamples\n\n\n\n\n\n\nUpgrade the system description stored as \nearth\n:\n\n\n$ \nmachinery\n upgrade-format earth\n\n\n\n\n\n\nUpgrade all stored system descriptions:\n\n\n$ \nmachinery\n upgrade-format --all",
            "title": "Upgrade Format"
        },
        {
            "location": "/machinery-upgrade-format.1/#upgrade-format-upgrade-system-description",
            "text": "",
            "title": "upgrade-format \u2014 Upgrade System Description"
        },
        {
            "location": "/machinery-upgrade-format.1/#synopsis",
            "text": "machinery upgrade-format  --all  machinery upgrade-format  NAME  machinery  help upgrade-format",
            "title": "Synopsis"
        },
        {
            "location": "/machinery-upgrade-format.1/#description",
            "text": "The  upgrade-format  command upgrades a system description to the latest format\nversion.  The  format  in this context is the structure of the internal system description\ndata. If the format version of a system description does not match the current machinery  format version,  machinery  is no longer able to work with the data\nuntil it is upgraded. The current format version can be retrieved using machinery --version . The format version of a system description can be found\nin the  meta  section of the according  manifest.json  file.  If the  --all  switch is given all local descriptions will be upgraded.",
            "title": "Description"
        },
        {
            "location": "/machinery-upgrade-format.1/#options",
            "text": "--all  (optional):\n    Upgrade all stored system descriptions.",
            "title": "Options"
        },
        {
            "location": "/machinery-upgrade-format.1/#arguments",
            "text": "NAME  (optional):\n    Upgrade specified system description.",
            "title": "Arguments"
        },
        {
            "location": "/machinery-upgrade-format.1/#examples",
            "text": "Upgrade the system description stored as  earth :  $  machinery  upgrade-format earth    Upgrade all stored system descriptions:  $  machinery  upgrade-format --all",
            "title": "Examples"
        },
        {
            "location": "/machinery-validate.1/",
            "text": "validate \u2014 Validate System Description\n\n\nSynopsis\n\n\nmachinery validate\n NAME\n\n\nmachinery\n help validate\n\n\nDescription\n\n\nThe \nvalidate\n subcommand validates an existing system description.\nIt checks, that the description has the correct structure and the data stored\nthere conforms to the required schema. It also verifies that all extracted files\nare present on disk and that all files have meta information.\n\n\nIn case of issues errors are shown with additional information.\n\n\nThe main purpose of this command is to verify the system description after\nmanually editing it.\n\n\nArguments\n\n\n\n\nNAME\n (required):\n    Name of the system description.\n\n\n\n\nExamples\n\n\n\n\n\n\nValidate the system description with the name \nmyhost\n:\n\n\n$ \nmachinery\n validate myhost",
            "title": "Validate"
        },
        {
            "location": "/machinery-validate.1/#validate-validate-system-description",
            "text": "",
            "title": "validate \u2014 Validate System Description"
        },
        {
            "location": "/machinery-validate.1/#synopsis",
            "text": "machinery validate  NAME  machinery  help validate",
            "title": "Synopsis"
        },
        {
            "location": "/machinery-validate.1/#description",
            "text": "The  validate  subcommand validates an existing system description.\nIt checks, that the description has the correct structure and the data stored\nthere conforms to the required schema. It also verifies that all extracted files\nare present on disk and that all files have meta information.  In case of issues errors are shown with additional information.  The main purpose of this command is to verify the system description after\nmanually editing it.",
            "title": "Description"
        },
        {
            "location": "/machinery-validate.1/#arguments",
            "text": "NAME  (required):\n    Name of the system description.",
            "title": "Arguments"
        },
        {
            "location": "/machinery-validate.1/#examples",
            "text": "Validate the system description with the name  myhost :  $  machinery  validate myhost",
            "title": "Examples"
        }
    ]
}